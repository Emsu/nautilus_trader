from typing import Dict

from nautilus_trader.accounting.accounts.base import Account
from nautilus_trader.analysis.analyzer import PortfolioAnalyzer
from nautilus_trader.model.identifiers import InstrumentId, Venue
from nautilus_trader.model.objects import Money

class PortfolioFacade:
    initialized: bool
    analyzer: PortfolioAnalyzer

    def account(self, venue: Venue) -> Account: ...
    def balances_locked(self, venue: Venue) -> Dict[str, Money]: ...
    def margins_init(self, venue: Venue) -> Dict[str, Money]: ...
    def margins_maint(self, venue: Venue) -> Dict[str, Money]: ...
    def unrealized_pnls(self, venue: Venue) -> Dict[str, Money]: ...
    def realized_pnls(self, venue: Venue) -> Dict[str, Money]: ...
    def net_exposures(self, venue: Venue) -> Dict[str, Money]: ...
    def unrealized_pnl(self, instrument_id: InstrumentId) -> Money: ...
    def realized_pnl(self, instrument_id: InstrumentId) -> Money: ...
    def net_exposure(self, instrument_id: InstrumentId) -> Money: ...
    def net_position(self, instrument_id: InstrumentId) -> object: ...
    def is_net_long(self, instrument_id: InstrumentId) -> bool: ...
    def is_net_short(self, instrument_id: InstrumentId) -> bool: ...
    def is_flat(self, instrument_id: InstrumentId) -> bool: ...
    def is_completely_flat(self) -> bool: ...
