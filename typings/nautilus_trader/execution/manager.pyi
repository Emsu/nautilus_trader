from typing import Callable, Dict, Optional

from nautilus_trader.cache.cache import Cache
from nautilus_trader.common.component import Clock, MessageBus
from nautilus_trader.core.message import Event
from nautilus_trader.execution.messages import SubmitOrder, TradingCommand
from nautilus_trader.model.events.order import (
    OrderCanceled,
    OrderEvent,
    OrderExpired,
    OrderFilled,
    OrderRejected,
    OrderUpdated,
)
from nautilus_trader.model.events.position import PositionEvent
from nautilus_trader.model.identifiers import (
    ClientId,
    ClientOrderId,
    ExecAlgorithmId,
    PositionId,
)
from nautilus_trader.model.objects import Quantity
from nautilus_trader.model.orders.base import Order

class OrderManager:
    active_local: bool
    debug: bool

    def __init__(
        self,
        clock: Clock,
        msgbus: MessageBus,
        cache: Cache,
        component_name: str,
        active_local: bool,
        submit_order_handler: Optional[Callable[[SubmitOrder], None]] = None,
        cancel_order_handler: Optional[Callable[[Order], None]] = None,
        modify_order_handler: Optional[Callable[[Order, Quantity], None]] = None,
        debug: bool = False,
    ) -> None: ...
    def get_submit_order_commands(self) -> Dict[ClientOrderId, SubmitOrder]: ...
    def cache_submit_order_command(self, command: SubmitOrder) -> None: ...
    def pop_submit_order_command(
        self, client_order_id: ClientOrderId
    ) -> Optional[SubmitOrder]: ...
    def reset(self) -> None: ...
    def cancel_order(self, order: Order) -> None: ...
    def modify_order_quantity(self, order: Order, new_quantity: Quantity) -> None: ...
    def create_new_submit_order(
        self,
        order: Order,
        position_id: Optional[PositionId] = None,
        client_id: Optional[ClientId] = None,
    ) -> None: ...
    def should_manage_order(self, order: Order) -> bool: ...
    def handle_event(self, event: Event) -> None: ...
    def handle_order_rejected(self, rejected: OrderRejected) -> None: ...
    def handle_order_canceled(self, canceled: OrderCanceled) -> None: ...
    def handle_order_expired(self, expired: OrderExpired) -> None: ...
    def handle_order_updated(self, updated: OrderUpdated) -> None: ...
    def handle_order_filled(self, filled: OrderFilled) -> None: ...
    def handle_contingencies(self, order: Order) -> None: ...
    def handle_contingencies_update(self, order: Order) -> None: ...
    def handle_position_event(self, event: PositionEvent) -> None: ...
    def send_emulator_command(self, command: TradingCommand) -> None: ...
    def send_algo_command(
        self, command: TradingCommand, exec_algorithm_id: ExecAlgorithmId
    ) -> None: ...
    def send_risk_command(self, command: TradingCommand) -> None: ...
    def send_exec_command(self, command: TradingCommand) -> None: ...
    def send_risk_event(self, event: OrderEvent) -> None: ...
    def send_exec_event(self, event: OrderEvent) -> None: ...
