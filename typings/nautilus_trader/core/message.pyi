from typing import Callable, Generic, TypeVar

from nautilus_trader.core.uuid import UUID4

T = TypeVar("T")

class Command:
    id: UUID4
    ts_init: int

    def __init__(self, command_id: UUID4, ts_init: int) -> None: ...
    def __eq__(self, other: "Command") -> bool: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...

class Document:
    id: UUID4
    ts_init: int

    def __init__(self, document_id: UUID4, ts_init: int) -> None: ...
    def __eq__(self, other: "Document") -> bool: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...

class Event:
    @property
    def id(self) -> UUID4: ...
    @property
    def ts_event(self) -> int: ...
    @property
    def ts_init(self) -> int: ...

class Request(Generic[T]):
    id: UUID4
    ts_init: int
    callback: Callable[[T], None]

    def __init__(
        self,
        callback: Callable[[T], None],
        request_id: UUID4,
        ts_init: int,
    ) -> None: ...
    def __eq__(self, other: "Request[T]") -> bool: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...

class Response:
    id: UUID4
    ts_init: int
    correlation_id: UUID4

    def __init__(
        self,
        correlation_id: UUID4,
        response_id: UUID4,
        ts_init: int,
    ) -> None: ...
    def __eq__(self, other: "Response") -> bool: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
