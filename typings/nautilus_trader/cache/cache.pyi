from datetime import datetime
from typing import List, Optional, Set

from nautilus_trader.accounting.accounts.base import Account
from nautilus_trader.cache.base import CacheFacade
from nautilus_trader.cache.config import CacheConfig
from nautilus_trader.cache.facade import CacheDatabaseFacade
from nautilus_trader.common.actor import Actor
from nautilus_trader.core.model import (
    AggregationSource,
    OmsType,
    OrderSide,
    PositionSide,
    PriceType,
)
from nautilus_trader.model.book import OrderBook
from nautilus_trader.model.data import Bar, BarType, QuoteTick, TradeTick
from nautilus_trader.model.identifiers import (
    AccountId,
    ClientId,
    ClientOrderId,
    ComponentId,
    ExecAlgorithmId,
    InstrumentId,
    OrderListId,
    PositionId,
    StrategyId,
    Venue,
    VenueOrderId,
)
from nautilus_trader.model.instruments.base import Instrument
from nautilus_trader.model.instruments.synthetic import SyntheticInstrument
from nautilus_trader.model.objects import Currency, Money, Price, Quantity
from nautilus_trader.model.orders.base import Order
from nautilus_trader.model.orders.list import OrderList
from nautilus_trader.model.position import Position
from nautilus_trader.trading.strategy import Strategy

class Cache(CacheFacade):
    def __init__(
        self,
        database: Optional[CacheDatabaseFacade] = None,
        config: Optional[CacheConfig] = None,
    ) -> None: ...
    @property
    def has_backing(self) -> bool: ...
    @property
    def tick_capacity(self) -> int: ...
    @property
    def bar_capacity(self) -> int: ...
    def cache_general(self) -> None: ...
    def cache_currencies(self) -> None: ...
    def cache_instruments(self) -> None: ...
    def cache_synthetics(self) -> None: ...
    def cache_accounts(self) -> None: ...
    def cache_orders(self) -> None: ...
    def cache_order_lists(self) -> None: ...
    def cache_positions(self) -> None: ...
    def build_index(self) -> None: ...
    def check_integrity(self) -> bool: ...
    def check_residuals(self) -> bool: ...
    def clear_index(self) -> None: ...
    def reset(self) -> None: ...
    def dispose(self) -> None: ...
    def flush_db(self) -> None: ...
    def load_instrument(self, instrument_id: InstrumentId) -> Optional[Instrument]: ...
    def load_synthetic(
        self, instrument_id: InstrumentId
    ) -> Optional[SyntheticInstrument]: ...
    def load_account(self, account_id: AccountId) -> Optional[Account]: ...
    def load_order(self, client_order_id: ClientOrderId) -> Optional[Order]: ...
    def load_position(self, position_id: PositionId) -> Optional[Position]: ...
    def load_actor(self, actor: Actor) -> None: ...
    def load_strategy(self, strategy: Strategy) -> None: ...
    def add(self, key: str, value: bytes) -> None: ...
    def add_order_book(self, order_book: OrderBook) -> None: ...
    def add_quote_tick(self, tick: QuoteTick) -> None: ...
    def add_trade_tick(self, tick: TradeTick) -> None: ...
    def add_bar(self, bar: Bar) -> None: ...
    def add_quote_ticks(self, ticks: List[QuoteTick]) -> None: ...
    def add_trade_ticks(self, ticks: List[TradeTick]) -> None: ...
    def add_bars(self, bars: List[Bar]) -> None: ...
    def add_currency(self, currency: Currency) -> None: ...
    def add_instrument(self, instrument: Instrument) -> None: ...
    def add_synthetic(self, synthetic: SyntheticInstrument) -> None: ...
    def add_account(self, account: Account) -> None: ...
    def add_venue_order_id(
        self,
        client_order_id: ClientOrderId,
        venue_order_id: VenueOrderId,
        overwrite: bool = False,
    ) -> None: ...
    def add_order(
        self,
        order: Order,
        position_id: Optional[PositionId] = None,
        client_id: Optional[ClientId] = None,
        overwrite: bool = False,
    ) -> None: ...
    def add_order_list(self, order_list: OrderList) -> None: ...
    def add_position_id(
        self,
        position_id: PositionId,
        venue: Venue,
        client_order_id: ClientOrderId,
        strategy_id: StrategyId,
    ) -> None: ...
    def add_position(self, position: Position, oms_type: OmsType) -> None: ...
    def snapshot_position(self, position: Position) -> None: ...
    def snapshot_position_state(
        self,
        position: Position,
        ts_snapshot: int,
        unrealized_pnl: Optional[Money] = None,
        open_only: bool = True,
    ) -> None: ...
    def snapshot_order_state(self, order: Order) -> None: ...
    def update_account(self, account: Account) -> None: ...
    def update_order(self, order: Order) -> None: ...
    def update_order_pending_cancel_local(self, order: Order) -> None: ...
    def update_position(self, position: Position) -> None: ...
    def update_actor(self, actor: Actor) -> None: ...
    def update_strategy(self, strategy: Strategy) -> None: ...
    def delete_actor(self, actor: Actor) -> None: ...
    def delete_strategy(self, strategy: Strategy) -> None: ...
    def get(self, key: str) -> Optional[bytes]: ...
    def quote_ticks(self, instrument_id: InstrumentId) -> List[QuoteTick]: ...
    def trade_ticks(self, instrument_id: InstrumentId) -> List[TradeTick]: ...
    def bars(self, bar_type: BarType) -> List[Bar]: ...
    def price(
        self, instrument_id: InstrumentId, price_type: PriceType
    ) -> Optional[Price]: ...
    def order_book(self, instrument_id: InstrumentId) -> Optional[OrderBook]: ...
    def quote_tick(
        self, instrument_id: InstrumentId, index: int = 0
    ) -> Optional[QuoteTick]: ...
    def trade_tick(
        self, instrument_id: InstrumentId, index: int = 0
    ) -> Optional[TradeTick]: ...
    def bar(self, bar_type: BarType, index: int = 0) -> Optional[Bar]: ...
    def book_update_count(self, instrument_id: InstrumentId) -> int: ...
    def quote_tick_count(self, instrument_id: InstrumentId) -> int: ...
    def trade_tick_count(self, instrument_id: InstrumentId) -> int: ...
    def bar_count(self, bar_type: BarType) -> int: ...
    def has_order_book(self, instrument_id: InstrumentId) -> bool: ...
    def has_quote_ticks(self, instrument_id: InstrumentId) -> bool: ...
    def has_trade_ticks(self, instrument_id: InstrumentId) -> bool: ...
    def has_bars(self, bar_type: BarType) -> bool: ...
    def get_xrate(
        self,
        venue: Venue,
        from_currency: Currency,
        to_currency: Currency,
        price_type: PriceType = PriceType.MID,
    ) -> float: ...
    def instrument(self, instrument_id: InstrumentId) -> Optional[Instrument]: ...
    def instrument_ids(self, venue: Optional[Venue] = None) -> List[InstrumentId]: ...
    def instruments(
        self,
        venue: Optional[Venue] = None,
        underlying: Optional[str] = None,
    ) -> List[Instrument]: ...
    def bar_types(
        self,
        instrument_id: Optional[InstrumentId] = None,
        price_type: Optional[PriceType] = None,
        aggregation_source: AggregationSource = AggregationSource.EXTERNAL,
    ) -> List[BarType]: ...
    def synthetic(
        self, instrument_id: InstrumentId
    ) -> Optional[SyntheticInstrument]: ...
    def synthetic_ids(self) -> List[InstrumentId]: ...
    def synthetics(self) -> List[SyntheticInstrument]: ...
    def account(self, account_id: AccountId) -> Optional[Account]: ...
    def account_for_venue(self, venue: Venue) -> Optional[Account]: ...
    def account_id(self, venue: Venue) -> Optional[AccountId]: ...
    def accounts(self) -> List[Account]: ...
    def client_order_ids(
        self,
        venue: Optional[Venue] = None,
        instrument_id: Optional[InstrumentId] = None,
        strategy_id: Optional[StrategyId] = None,
    ) -> Set[ClientOrderId]: ...
    def client_order_ids_open(
        self,
        venue: Optional[Venue] = None,
        instrument_id: Optional[InstrumentId] = None,
        strategy_id: Optional[StrategyId] = None,
    ) -> Set[ClientOrderId]: ...
    def client_order_ids_closed(
        self,
        venue: Optional[Venue] = None,
        instrument_id: Optional[InstrumentId] = None,
        strategy_id: Optional[StrategyId] = None,
    ) -> Set[ClientOrderId]: ...
    def client_order_ids_emulated(
        self,
        venue: Optional[Venue] = None,
        instrument_id: Optional[InstrumentId] = None,
        strategy_id: Optional[StrategyId] = None,
    ) -> Set[ClientOrderId]: ...
    def client_order_ids_inflight(
        self,
        venue: Optional[Venue] = None,
        instrument_id: Optional[InstrumentId] = None,
        strategy_id: Optional[StrategyId] = None,
    ) -> Set[ClientOrderId]: ...
    def order_list_ids(
        self,
        venue: Optional[Venue] = None,
        instrument_id: Optional[InstrumentId] = None,
        strategy_id: Optional[StrategyId] = None,
    ) -> Set[OrderListId]: ...
    def position_ids(
        self,
        venue: Optional[Venue] = None,
        instrument_id: Optional[InstrumentId] = None,
        strategy_id: Optional[StrategyId] = None,
    ) -> Set[PositionId]: ...
    def position_open_ids(
        self,
        venue: Optional[Venue] = None,
        instrument_id: Optional[InstrumentId] = None,
        strategy_id: Optional[StrategyId] = None,
    ) -> Set[PositionId]: ...
    def position_closed_ids(
        self,
        venue: Optional[Venue] = None,
        instrument_id: Optional[InstrumentId] = None,
        strategy_id: Optional[StrategyId] = None,
    ) -> Set[PositionId]: ...
    def actor_ids(self) -> Set[ComponentId]: ...
    def strategy_ids(self) -> Set[StrategyId]: ...
    def exec_algorithm_ids(self) -> Set[ExecAlgorithmId]: ...
    def order(self, client_order_id: ClientOrderId) -> Optional[Order]: ...
    def client_order_id(
        self, venue_order_id: VenueOrderId
    ) -> Optional[ClientOrderId]: ...
    def venue_order_id(
        self, client_order_id: ClientOrderId
    ) -> Optional[VenueOrderId]: ...
    def client_id(self, client_order_id: ClientOrderId) -> Optional[ClientId]: ...
    def orders(
        self,
        venue: Optional[Venue] = None,
        instrument_id: Optional[InstrumentId] = None,
        strategy_id: Optional[StrategyId] = None,
        side: OrderSide = OrderSide.NO_ORDER_SIDE,
    ) -> List[Order]: ...
    def orders_open(
        self,
        venue: Optional[Venue] = None,
        instrument_id: Optional[InstrumentId] = None,
        strategy_id: Optional[StrategyId] = None,
        side: OrderSide = OrderSide.NO_ORDER_SIDE,
    ) -> List[Order]: ...
    def orders_closed(
        self,
        venue: Optional[Venue] = None,
        instrument_id: Optional[InstrumentId] = None,
        strategy_id: Optional[StrategyId] = None,
        side: OrderSide = OrderSide.NO_ORDER_SIDE,
    ) -> List[Order]: ...
    def orders_emulated(
        self,
        venue: Optional[Venue] = None,
        instrument_id: Optional[InstrumentId] = None,
        strategy_id: Optional[StrategyId] = None,
        side: OrderSide = OrderSide.NO_ORDER_SIDE,
    ) -> List[Order]: ...
    def orders_inflight(
        self,
        venue: Optional[Venue] = None,
        instrument_id: Optional[InstrumentId] = None,
        strategy_id: Optional[StrategyId] = None,
        side: OrderSide = OrderSide.NO_ORDER_SIDE,
    ) -> List[Order]: ...
    def orders_for_position(self, position_id: PositionId) -> List[Order]: ...
    def order_exists(self, client_order_id: ClientOrderId) -> bool: ...
    def is_order_open(self, client_order_id: ClientOrderId) -> bool: ...
    def is_order_closed(self, client_order_id: ClientOrderId) -> bool: ...
    def is_order_emulated(self, client_order_id: ClientOrderId) -> bool: ...
    def is_order_inflight(self, client_order_id: ClientOrderId) -> bool: ...
    def is_order_pending_cancel_local(self, client_order_id: ClientOrderId) -> bool: ...
    def orders_open_count(
        self,
        venue: Optional[Venue] = None,
        instrument_id: Optional[InstrumentId] = None,
        strategy_id: Optional[StrategyId] = None,
        side: OrderSide = OrderSide.NO_ORDER_SIDE,
    ) -> int: ...
    def orders_closed_count(
        self,
        venue: Optional[Venue] = None,
        instrument_id: Optional[InstrumentId] = None,
        strategy_id: Optional[StrategyId] = None,
        side: OrderSide = OrderSide.NO_ORDER_SIDE,
    ) -> int: ...
    def orders_emulated_count(
        self,
        venue: Optional[Venue] = None,
        instrument_id: Optional[InstrumentId] = None,
        strategy_id: Optional[StrategyId] = None,
        side: OrderSide = OrderSide.NO_ORDER_SIDE,
    ) -> int: ...
    def orders_inflight_count(
        self,
        venue: Optional[Venue] = None,
        instrument_id: Optional[InstrumentId] = None,
        strategy_id: Optional[StrategyId] = None,
        side: OrderSide = OrderSide.NO_ORDER_SIDE,
    ) -> int: ...
    def orders_total_count(
        self,
        venue: Optional[Venue] = None,
        instrument_id: Optional[InstrumentId] = None,
        strategy_id: Optional[StrategyId] = None,
        side: OrderSide = OrderSide.NO_ORDER_SIDE,
    ) -> int: ...
    def order_list(self, order_list_id: OrderListId) -> Optional[OrderList]: ...
    def order_lists(
        self,
        venue: Optional[Venue] = None,
        instrument_id: Optional[InstrumentId] = None,
        strategy_id: Optional[StrategyId] = None,
    ) -> List[OrderList]: ...
    def order_list_exists(self, order_list_id: OrderListId) -> bool: ...
    def orders_for_exec_algorithm(
        self,
        exec_algorithm_id: ExecAlgorithmId,
        venue: Optional[Venue] = None,
        instrument_id: Optional[InstrumentId] = None,
        strategy_id: Optional[StrategyId] = None,
        side: OrderSide = OrderSide.NO_ORDER_SIDE,
    ) -> List[Order]: ...
    def orders_for_exec_spawn(self, exec_spawn_id: ClientOrderId) -> List[Order]: ...
    def exec_spawn_total_quantity(
        self,
        exec_spawn_id: ClientOrderId,
        active_only: bool = False,
    ) -> Optional[Quantity]: ...
    def exec_spawn_total_filled_qty(
        self,
        exec_spawn_id: ClientOrderId,
        active_only: bool = False,
    ) -> Optional[Quantity]: ...
    def exec_spawn_total_leaves_qty(
        self,
        exec_spawn_id: ClientOrderId,
        active_only: bool = False,
    ) -> Optional[Quantity]: ...
    def position(self, position_id: PositionId) -> Optional[Position]: ...
    def position_for_order(
        self, client_order_id: ClientOrderId
    ) -> Optional[Position]: ...
    def position_id(self, client_order_id: ClientOrderId) -> Optional[PositionId]: ...
    def position_snapshots(
        self, position_id: Optional[PositionId] = None
    ) -> List[Position]: ...
    def positions(
        self,
        venue: Optional[Venue] = None,
        instrument_id: Optional[InstrumentId] = None,
        strategy_id: Optional[StrategyId] = None,
        side: PositionSide = PositionSide.NO_POSITION_SIDE,
    ) -> List[Position]: ...
    def positions_open(
        self,
        venue: Optional[Venue] = None,
        instrument_id: Optional[InstrumentId] = None,
        strategy_id: Optional[StrategyId] = None,
        side: PositionSide = PositionSide.NO_POSITION_SIDE,
    ) -> List[Position]: ...
    def positions_closed(
        self,
        venue: Optional[Venue] = None,
        instrument_id: Optional[InstrumentId] = None,
        strategy_id: Optional[StrategyId] = None,
    ) -> List[Position]: ...
    def position_exists(self, position_id: PositionId) -> bool: ...
    def is_position_open(self, position_id: PositionId) -> bool: ...
    def is_position_closed(self, position_id: PositionId) -> bool: ...
    def positions_open_count(
        self,
        venue: Optional[Venue] = None,
        instrument_id: Optional[InstrumentId] = None,
        strategy_id: Optional[StrategyId] = None,
        side: PositionSide = PositionSide.NO_POSITION_SIDE,
    ) -> int: ...
    def positions_closed_count(
        self,
        venue: Optional[Venue] = None,
        instrument_id: Optional[InstrumentId] = None,
        strategy_id: Optional[StrategyId] = None,
    ) -> int: ...
    def positions_total_count(
        self,
        venue: Optional[Venue] = None,
        instrument_id: Optional[InstrumentId] = None,
        strategy_id: Optional[StrategyId] = None,
        side: PositionSide = PositionSide.NO_POSITION_SIDE,
    ) -> int: ...
    def strategy_id_for_order(
        self, client_order_id: ClientOrderId
    ) -> Optional[StrategyId]: ...
    def strategy_id_for_position(
        self, position_id: PositionId
    ) -> Optional[StrategyId]: ...
    def heartbeat(self, timestamp: datetime) -> None: ...
