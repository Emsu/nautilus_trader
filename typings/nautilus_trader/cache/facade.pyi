from datetime import datetime
from typing import Dict, List, Optional

from nautilus_trader.accounting.accounts.base import Account
from nautilus_trader.cache.config import CacheConfig
from nautilus_trader.common.actor import Actor
from nautilus_trader.model.identifiers import (
    AccountId,
    ClientId,
    ClientOrderId,
    ComponentId,
    InstrumentId,
    PositionId,
    StrategyId,
    VenueOrderId,
)
from nautilus_trader.model.instruments.base import Instrument
from nautilus_trader.model.instruments.synthetic import SyntheticInstrument
from nautilus_trader.model.objects import Currency, Money
from nautilus_trader.model.orders.base import Order
from nautilus_trader.model.position import Position
from nautilus_trader.trading.strategy import Strategy

class CacheDatabaseFacade:
    def __init__(self, config: Optional[CacheConfig] = None) -> None: ...
    def close(self) -> None: ...
    def flush(self) -> None: ...
    def keys(self, pattern: str = "*") -> List[str]: ...
    def load(self) -> Dict: ...
    def load_currencies(self) -> Dict: ...
    def load_instruments(self) -> Dict: ...
    def load_synthetics(self) -> Dict: ...
    def load_accounts(self) -> Dict: ...
    def load_orders(self) -> Dict: ...
    def load_positions(self) -> Dict: ...
    def load_index_order_position(self) -> Dict: ...
    def load_index_order_client(self) -> Dict: ...
    def load_currency(self, code: str) -> Currency: ...
    def load_instrument(self, instrument_id: InstrumentId) -> Instrument: ...
    def load_synthetic(self, instrument_id: InstrumentId) -> SyntheticInstrument: ...
    def load_account(self, account_id: AccountId) -> Account: ...
    def load_order(self, client_order_id: ClientOrderId) -> Order: ...
    def load_position(self, position_id: PositionId) -> Position: ...
    def load_actor(self, component_id: ComponentId) -> Dict: ...
    def delete_actor(self, component_id: ComponentId) -> None: ...
    def load_strategy(self, strategy_id: StrategyId) -> Dict: ...
    def delete_strategy(self, strategy_id: StrategyId) -> None: ...
    def add(self, key: str, value: bytes) -> None: ...
    def add_currency(self, currency: Currency) -> None: ...
    def add_instrument(self, instrument: Instrument) -> None: ...
    def add_synthetic(self, synthetic: SyntheticInstrument) -> None: ...
    def add_account(self, account: Account) -> None: ...
    def add_order(
        self,
        order: Order,
        position_id: Optional[PositionId] = None,
        client_id: Optional[ClientId] = None,
    ) -> None: ...
    def add_position(self, position: Position) -> None: ...
    def index_venue_order_id(
        self, client_order_id: ClientOrderId, venue_order_id: VenueOrderId
    ) -> None: ...
    def index_order_position(
        self, client_order_id: ClientOrderId, position_id: PositionId
    ) -> None: ...
    def update_account(self, account: Account) -> None: ...
    def update_order(self, order: Order) -> None: ...
    def update_position(self, position: Position) -> None: ...
    def update_actor(self, actor: Actor) -> None: ...
    def update_strategy(self, strategy: Strategy) -> None: ...
    def snapshot_order_state(self, order: Order) -> None: ...
    def snapshot_position_state(
        self,
        position: Position,
        ts_snapshot: int,
        unrealized_pnl: Optional[Money] = None,
    ) -> None: ...
    def heartbeat(self, timestamp: datetime) -> None: ...
