from typing import Dict, List, Optional

from nautilus_trader.core.model import AccountType, LiquiditySide, OrderSide
from nautilus_trader.model.events.account import AccountState
from nautilus_trader.model.events.order import OrderFilled
from nautilus_trader.model.identifiers import AccountId, InstrumentId
from nautilus_trader.model.instruments.base import Instrument
from nautilus_trader.model.objects import (
    AccountBalance,
    Currency,
    Money,
    Price,
    Quantity,
)
from nautilus_trader.model.position import Position

class Account:
    id: AccountId
    type: AccountType
    base_currency: Optional[Currency]
    is_cash_account: bool
    is_margin_account: bool
    calculate_account_state: bool

    def __init__(self, event: AccountState, calculate_account_state: bool) -> None: ...
    def __eq__(self, other: Account) -> bool: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    @property
    def last_event(self) -> AccountState: ...
    @property
    def events(self) -> List[AccountState]: ...
    @property
    def event_count(self) -> int: ...
    def currencies(self) -> List[Currency]: ...
    def starting_balances(self) -> Dict[Currency, Money]: ...
    def balances(self) -> Dict[Currency, AccountBalance]: ...
    def balances_total(self) -> Dict[Currency, Money]: ...
    def balances_free(self) -> Dict[Currency, Money]: ...
    def balances_locked(self) -> Dict[Currency, Money]: ...
    def commissions(self) -> Dict[Currency, Money]: ...
    def balance(
        self, currency: Optional[Currency] = None
    ) -> Optional[AccountBalance]: ...
    def balance_total(self, currency: Optional[Currency] = None) -> Optional[Money]: ...
    def balance_free(self, currency: Optional[Currency] = None) -> Optional[Money]: ...
    def balance_locked(
        self, currency: Optional[Currency] = None
    ) -> Optional[Money]: ...
    def commission(self, currency: Currency) -> Optional[Money]: ...
    def apply(self, event: AccountState) -> None: ...
    def update_balances(
        self, balances: List[AccountBalance], allow_zero: bool = True
    ) -> None: ...
    def update_commissions(self, commission: Money) -> None: ...
    def is_unleveraged(self, instrument_id: InstrumentId) -> bool: ...
    def calculate_commission(
        self,
        instrument: Instrument,
        last_qty: Quantity,
        last_px: Price,
        liquidity_side: LiquiditySide,
        use_quote_for_inverse: bool = False,
    ) -> Money: ...
    def calculate_pnls(
        self,
        instrument: Instrument,
        fill: OrderFilled,
        position: Optional[Position] = None,
    ) -> List[Money]: ...
    def balance_impact(
        self,
        instrument: Instrument,
        quantity: Quantity,
        price: Price,
        order_side: OrderSide,
    ) -> Money: ...
