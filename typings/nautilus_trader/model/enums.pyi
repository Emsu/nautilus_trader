from typing import ClassVar, Iterator, TypeVar

from typing_extensions import Self

T = TypeVar("T")

class AccountType:
    CASH: ClassVar[AccountType]
    MARGIN: ClassVar[AccountType]
    BETTING: ClassVar[AccountType]

    def __init__(self, value: str | int) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...
    @classmethod
    def variants(cls) -> Iterator[Self]: ...
    @classmethod
    def from_str(cls, data: str) -> Self: ...

class AggregationSource:
    EXTERNAL: ClassVar[AggregationSource]
    INTERNAL: ClassVar[AggregationSource]

    def __init__(self, value: str | int) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...
    @classmethod
    def variants(cls) -> Iterator[Self]: ...
    @classmethod
    def from_str(cls, data: str) -> Self: ...

class AggressorSide:
    NO_AGGRESSOR: ClassVar[AggressorSide]
    BUYER: ClassVar[AggressorSide]
    SELLER: ClassVar[AggressorSide]

    def __init__(self, value: str | int) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...
    @classmethod
    def variants(cls) -> Iterator[Self]: ...
    @classmethod
    def from_str(cls, data: str) -> Self: ...

class AssetClass:
    FX: ClassVar[AssetClass]
    EQUITY: ClassVar[AssetClass]
    COMMODITY: ClassVar[AssetClass]
    DEBT: ClassVar[AssetClass]
    INDEX: ClassVar[AssetClass]
    CRYPTOCURRENCY: ClassVar[AssetClass]
    ALTERNATIVE: ClassVar[AssetClass]

    def __init__(self, value: str | int) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...
    @classmethod
    def variants(cls) -> Iterator[Self]: ...
    @classmethod
    def from_str(cls, data: str) -> Self: ...

class InstrumentClass:
    SPOT: ClassVar[InstrumentClass]
    SWAP: ClassVar[InstrumentClass]
    FUTURE: ClassVar[InstrumentClass]
    FORWARD: ClassVar[InstrumentClass]
    CFD: ClassVar[InstrumentClass]
    BOND: ClassVar[InstrumentClass]
    OPTION: ClassVar[InstrumentClass]
    WARRANT: ClassVar[InstrumentClass]
    SPORTS_BETTING: ClassVar[InstrumentClass]

    def __init__(self, value: str | int) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...
    @classmethod
    def variants(cls) -> Iterator[Self]: ...
    @classmethod
    def from_str(cls, data: str) -> Self: ...

class BarAggregation:
    TICK: ClassVar[BarAggregation]
    TICK_IMBALANCE: ClassVar[BarAggregation]
    TICK_RUNS: ClassVar[BarAggregation]
    VOLUME: ClassVar[BarAggregation]
    VOLUME_IMBALANCE: ClassVar[BarAggregation]
    VOLUME_RUNS: ClassVar[BarAggregation]
    VALUE: ClassVar[BarAggregation]
    VALUE_IMBALANCE: ClassVar[BarAggregation]
    VALUE_RUNS: ClassVar[BarAggregation]
    MILLISECOND: ClassVar[BarAggregation]
    SECOND: ClassVar[BarAggregation]
    MINUTE: ClassVar[BarAggregation]
    HOUR: ClassVar[BarAggregation]
    DAY: ClassVar[BarAggregation]
    WEEK: ClassVar[BarAggregation]
    MONTH: ClassVar[BarAggregation]

    def __init__(self, value: str | int) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...
    @classmethod
    def variants(cls) -> Iterator[Self]: ...
    @classmethod
    def from_str(cls, data: str) -> Self: ...

class BookAction:
    ADD: ClassVar[BookAction]
    UPDATE: ClassVar[BookAction]
    DELETE: ClassVar[BookAction]
    CLEAR: ClassVar[BookAction]

    def __init__(self, value: str | int) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...
    @classmethod
    def variants(cls) -> Iterator[Self]: ...
    @classmethod
    def from_str(cls, data: str) -> Self: ...

class ContingencyType:
    NO_CONTINGENCY: ClassVar[ContingencyType]
    OCO: ClassVar[ContingencyType]
    OTO: ClassVar[ContingencyType]
    OUO: ClassVar[ContingencyType]

    def __init__(self, value: str | int) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...
    @classmethod
    def variants(cls) -> Iterator[Self]: ...
    @classmethod
    def from_str(cls, data: str) -> Self: ...

class CurrencyType:
    CRYPTO: ClassVar[CurrencyType]
    FIAT: ClassVar[CurrencyType]
    COMMODITY_BACKED: ClassVar[CurrencyType]

    def __init__(self, value: str | int) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...
    @classmethod
    def variants(cls) -> Iterator[Self]: ...
    @classmethod
    def from_str(cls, data: str) -> Self: ...

class InstrumentCloseType:
    END_OF_SESSION: ClassVar[InstrumentCloseType]
    CONTRACT_EXPIRED: ClassVar[InstrumentCloseType]

    def __init__(self, value: str | int) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...
    @classmethod
    def variants(cls) -> Iterator[Self]: ...
    @classmethod
    def from_str(cls, data: str) -> Self: ...

class LiquiditySide:
    NO_LIQUIDITY_SIDE: ClassVar[LiquiditySide]
    MAKER: ClassVar[LiquiditySide]
    TAKER: ClassVar[LiquiditySide]

    def __init__(self, value: str | int) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...
    @classmethod
    def variants(cls) -> Iterator[Self]: ...
    @classmethod
    def from_str(cls, data: str) -> Self: ...

class MarketStatus:
    OPEN: ClassVar[MarketStatus]
    CLOSED: ClassVar[MarketStatus]
    PAUSED: ClassVar[MarketStatus]
    SUSPENDED: ClassVar[MarketStatus]
    NOT_AVAILABLE: ClassVar[MarketStatus]

    def __init__(self, value: str | int) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...
    @classmethod
    def variants(cls) -> Iterator[Self]: ...
    @classmethod
    def from_str(cls, data: str) -> Self: ...

class MarketStatusAction:
    NONE: ClassVar[MarketStatusAction]
    PRE_OPEN: ClassVar[MarketStatusAction]
    PRE_CROSS: ClassVar[MarketStatusAction]
    QUOTING: ClassVar[MarketStatusAction]
    CROSS: ClassVar[MarketStatusAction]
    ROTATION: ClassVar[MarketStatusAction]
    NEW_PRICE_INDICATION: ClassVar[MarketStatusAction]
    TRADING: ClassVar[MarketStatusAction]
    HALT: ClassVar[MarketStatusAction]
    PAUSE: ClassVar[MarketStatusAction]
    SUSPEND: ClassVar[MarketStatusAction]
    PRE_CLOSE: ClassVar[MarketStatusAction]
    CLOSE: ClassVar[MarketStatusAction]
    POST_CLOSE: ClassVar[MarketStatusAction]
    SHORT_SELL_RESTRICTION_CHANGE: ClassVar[MarketStatusAction]
    NOT_AVAILABLE_FOR_TRADING: ClassVar[MarketStatusAction]

    def __init__(self, value: str | int) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...
    @classmethod
    def variants(cls) -> Iterator[Self]: ...
    @classmethod
    def from_str(cls, data: str) -> Self: ...

class OmsType:
    UNSPECIFIED: ClassVar[OmsType]
    NETTING: ClassVar[OmsType]
    HEDGING: ClassVar[OmsType]

    def __init__(self, value: str | int) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...
    @classmethod
    def variants(cls) -> Iterator[Self]: ...
    @classmethod
    def from_str(cls, data: str) -> Self: ...

class OptionKind:
    CALL: ClassVar[OptionKind]
    PUT: ClassVar[OptionKind]

    def __init__(self, value: str | int) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...
    @classmethod
    def variants(cls) -> Iterator[Self]: ...
    @classmethod
    def from_str(cls, data: str) -> Self: ...

class OrderSide:
    NO_ORDER_SIDE: ClassVar[OrderSide]
    BUY: ClassVar[OrderSide]
    SELL: ClassVar[OrderSide]

    def __init__(self, value: str | int) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...
    @classmethod
    def variants(cls) -> Iterator[Self]: ...
    @classmethod
    def from_str(cls, data: str) -> Self: ...

class OrderStatus:
    INITIALIZED: ClassVar[OrderStatus]
    DENIED: ClassVar[OrderStatus]
    EMULATED: ClassVar[OrderStatus]
    RELEASED: ClassVar[OrderStatus]
    SUBMITTED: ClassVar[OrderStatus]
    ACCEPTED: ClassVar[OrderStatus]
    REJECTED: ClassVar[OrderStatus]
    CANCELED: ClassVar[OrderStatus]
    EXPIRED: ClassVar[OrderStatus]
    TRIGGERED: ClassVar[OrderStatus]
    PENDING_UPDATE: ClassVar[OrderStatus]
    PENDING_CANCEL: ClassVar[OrderStatus]
    PARTIALLY_FILLED: ClassVar[OrderStatus]
    FILLED: ClassVar[OrderStatus]

    def __init__(self, value: str | int) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...
    @classmethod
    def variants(cls) -> Iterator[Self]: ...
    @classmethod
    def from_str(cls, data: str) -> Self: ...

class OrderType:
    MARKET: ClassVar[OrderType]
    LIMIT: ClassVar[OrderType]
    STOP_MARKET: ClassVar[OrderType]
    STOP_LIMIT: ClassVar[OrderType]
    MARKET_TO_LIMIT: ClassVar[OrderType]
    MARKET_IF_TOUCHED: ClassVar[OrderType]
    LIMIT_IF_TOUCHED: ClassVar[OrderType]
    TRAILING_STOP_MARKET: ClassVar[OrderType]
    TRAILING_STOP_LIMIT: ClassVar[OrderType]

    def __init__(self, value: str | int) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...
    @classmethod
    def variants(cls) -> Iterator[Self]: ...
    @classmethod
    def from_str(cls, data: str) -> Self: ...

class PositionSide:
    NO_POSITION_SIDE: ClassVar[PositionSide]
    FLAT: ClassVar[PositionSide]
    LONG: ClassVar[PositionSide]
    SHORT: ClassVar[PositionSide]

    def __init__(self, value: str | int) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...
    @classmethod
    def variants(cls) -> Iterator[Self]: ...
    @classmethod
    def from_str(cls, data: str) -> Self: ...

class PriceType:
    BID: ClassVar[PriceType]
    ASK: ClassVar[PriceType]
    MID: ClassVar[PriceType]
    LAST: ClassVar[PriceType]

class RecordFlag:
    LAST: ClassVar[RecordFlag]
    TOB: ClassVar[RecordFlag]
    SNAPSHOT: ClassVar[RecordFlag]
    MBP: ClassVar[RecordFlag]

    def __init__(self, value: str | int) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...
    def matches(self, value: int) -> bool: ...
    @classmethod
    def variants(cls) -> Iterator[Self]: ...
    @classmethod
    def from_str(cls, data: str) -> Self: ...

class TimeInForce:
    GTC: ClassVar[TimeInForce]
    IOC: ClassVar[TimeInForce]
    FOK: ClassVar[TimeInForce]
    GTD: ClassVar[TimeInForce]
    DAY: ClassVar[TimeInForce]
    AT_THE_OPEN: ClassVar[TimeInForce]
    AT_THE_CLOSE: ClassVar[TimeInForce]

    def __init__(self, value: str | int) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...
    @classmethod
    def variants(cls) -> Iterator[Self]: ...
    @classmethod
    def from_str(cls, data: str) -> Self: ...

class TrailingOffsetType:
    NO_TRAILING_OFFSET: ClassVar[TrailingOffsetType]
    PRICE: ClassVar[TrailingOffsetType]
    BASIS_POINTS: ClassVar[TrailingOffsetType]
    TICKS: ClassVar[TrailingOffsetType]
    PRICE_TIER: ClassVar[TrailingOffsetType]

    def __init__(self, value: str | int) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...
    @classmethod
    def variants(cls) -> Iterator[Self]: ...
    @classmethod
    def from_str(cls, data: str) -> Self: ...

class TriggerType:
    NO_TRIGGER: ClassVar[TriggerType]
    DEFAULT: ClassVar[TriggerType]
    BID_ASK: ClassVar[TriggerType]
    LAST_TRADE: ClassVar[TriggerType]
    DOUBLE_LAST: ClassVar[TriggerType]
    DOUBLE_BID_ASK: ClassVar[TriggerType]
    LAST_OR_BID_ASK: ClassVar[TriggerType]
    MID_POINT: ClassVar[TriggerType]
    MARK_PRICE: ClassVar[TriggerType]
    INDEX_PRICE: ClassVar[TriggerType]

    def __init__(self, value: str | int) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...
    @classmethod
    def variants(cls) -> Iterator[Self]: ...
    @classmethod
    def from_str(cls, data: str) -> Self: ...

class BookType:
    L1_MBP: ClassVar[BookType]
    L2_MBP: ClassVar[BookType]
    L3_MBO: ClassVar[BookType]

    def __init__(self, value: str | int) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...
    @classmethod
    def variants(cls) -> Iterator[Self]: ...
    @classmethod
    def from_str(cls, data: str) -> Self: ...

class TradingState:
    ACTIVE: ClassVar[TradingState]
    HALTED: ClassVar[TradingState]
    REDUCING: ClassVar[TradingState]

    def __init__(self, value: str | int) -> None: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...
    @classmethod
    def variants(cls) -> Iterator[Self]: ...
    @classmethod
    def from_str(cls, data: str) -> Self: ...
