from typing import List, Optional, Tuple, Union

from nautilus_trader.core.data import Data
from nautilus_trader.core.model import BookType, OrderSide
from nautilus_trader.model.data import (
    BookOrder,
    OrderBookDelta,
    OrderBookDeltas,
    OrderBookDepth10,
    QuoteTick,
    TradeTick,
)
from nautilus_trader.model.identifiers import InstrumentId
from nautilus_trader.model.objects import Price, Quantity
from nautilus_trader.model.orders.base import Order

class OrderBook(Data):
    def __init__(self, instrument_id: InstrumentId, book_type: BookType) -> None: ...
    def __repr__(self) -> str: ...
    @property
    def instrument_id(self) -> InstrumentId: ...
    @property
    def book_type(self) -> BookType: ...
    @property
    def sequence(self) -> int: ...
    @property
    def ts_event(self) -> int: ...
    @property
    def ts_init(self) -> int: ...
    @property
    def ts_last(self) -> int: ...
    @property
    def count(self) -> int: ...
    def reset(self) -> None: ...
    def add(
        self, order: BookOrder, ts_event: int, flags: int = 0, sequence: int = 0
    ) -> None: ...
    def update(
        self, order: BookOrder, ts_event: int, flags: int = 0, sequence: int = 0
    ) -> None: ...
    def delete(
        self, order: BookOrder, ts_event: int, flags: int = 0, sequence: int = 0
    ) -> None: ...
    def clear(self, ts_event: int, sequence: int = 0) -> None: ...
    def clear_bids(self, ts_event: int, sequence: int = 0) -> None: ...
    def clear_asks(self, ts_event: int, sequence: int = 0) -> None: ...
    def apply_delta(self, delta: OrderBookDelta) -> None: ...
    def apply_deltas(self, deltas: OrderBookDeltas) -> None: ...
    def apply_depth(self, depth: OrderBookDepth10) -> None: ...
    def apply(
        self, data: Union[OrderBookDelta, OrderBookDeltas, OrderBookDepth10]
    ) -> None: ...
    def check_integrity(self) -> None: ...
    def bids(self) -> List[Level]: ...
    def asks(self) -> List[Level]: ...
    def best_bid_price(self) -> Optional[Price]: ...
    def best_ask_price(self) -> Optional[Price]: ...
    def best_bid_size(self) -> Optional[Quantity]: ...
    def best_ask_size(self) -> Optional[Quantity]: ...
    def spread(self) -> Optional[float]: ...
    def midpoint(self) -> Optional[float]: ...
    def get_avg_px_for_quantity(
        self, quantity: Quantity, order_side: OrderSide
    ) -> float: ...
    def get_quantity_for_price(self, price: Price, order_side: OrderSide) -> float: ...
    def simulate_fills(
        self, order: Order, price_prec: int, is_aggressive: bool
    ) -> List[Tuple[Price, Quantity]]: ...
    def update_quote_tick(self, tick: QuoteTick) -> None: ...
    def update_trade_tick(self, tick: TradeTick) -> None: ...
    def pprint(self, num_levels: int = 3) -> str: ...

class Level:
    @property
    def price(self) -> Price: ...
    def orders(self) -> List[BookOrder]: ...
    def size(self) -> float: ...
    def exposure(self) -> float: ...
    def __eq__(self, other: Level) -> bool: ...
    def __lt__(self, other: Level) -> bool: ...
    def __le__(self, other: Level) -> bool: ...
    def __gt__(self, other: Level) -> bool: ...
    def __ge__(self, other: Level) -> bool: ...
    def __repr__(self) -> str: ...
