import datetime
from typing import Any, ClassVar, Dict, List, Optional, Type

import numpy as np
from nautilus_trader.core.data import Data
from nautilus_trader.core.model import (
    AggregationSource,
    AggressorSide,
    BookAction,
    InstrumentCloseType,
    MarketStatusAction,
    OrderSide,
    PriceType,
)
from nautilus_trader.model.identifiers import InstrumentId, TradeId
from nautilus_trader.model.objects import Price, Quantity
from numpy.typing import NDArray

class BarAggregation:
    TICK: ClassVar[int]
    TICK_IMBALANCE: ClassVar[int]
    TICK_RUNS: ClassVar[int]
    VOLUME: ClassVar[int]
    VOLUME_IMBALANCE: ClassVar[int]
    VOLUME_RUNS: ClassVar[int]
    VALUE: ClassVar[int]
    VALUE_IMBALANCE: ClassVar[int]
    VALUE_RUNS: ClassVar[int]
    MILLISECOND: ClassVar[int]
    SECOND: ClassVar[int]
    MINUTE: ClassVar[int]
    HOUR: ClassVar[int]
    DAY: ClassVar[int]
    WEEK: ClassVar[int]
    MONTH: ClassVar[int]

class BarSpecification:
    def __init__(
        self,
        step: int,
        aggregation: BarAggregation,
        price_type: PriceType,
    ) -> None: ...
    @property
    def step(self) -> int: ...
    @property
    def aggregation(self) -> BarAggregation: ...
    @property
    def price_type(self) -> PriceType: ...
    @property
    def timedelta(self) -> datetime.timedelta: ...
    def is_time_aggregated(self) -> bool: ...
    def is_threshold_aggregated(self) -> bool: ...
    def is_information_aggregated(self) -> bool: ...
    @staticmethod
    def from_str(value: str) -> BarSpecification: ...
    @staticmethod
    def from_timedelta(
        duration: datetime.timedelta, price_type: PriceType
    ) -> BarSpecification: ...
    @staticmethod
    def check_time_aggregated(aggregation: BarAggregation) -> bool: ...
    @staticmethod
    def check_threshold_aggregated(aggregation: BarAggregation) -> bool: ...
    @staticmethod
    def check_information_aggregated(aggregation: BarAggregation) -> bool: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: BarSpecification) -> bool: ...
    def __lt__(self, other: BarSpecification) -> bool: ...
    def __le__(self, other: BarSpecification) -> bool: ...
    def __gt__(self, other: BarSpecification) -> bool: ...
    def __ge__(self, other: BarSpecification) -> bool: ...
    def __hash__(self) -> int: ...
    def to_str(self) -> str: ...

class BarType:
    def __init__(
        self,
        instrument_id: InstrumentId,
        bar_spec: BarSpecification,
        aggregation_source: AggregationSource = AggregationSource.EXTERNAL,
    ) -> None: ...
    @property
    def instrument_id(self) -> InstrumentId: ...
    @property
    def spec(self) -> BarSpecification: ...
    @property
    def aggregation_source(self) -> AggregationSource: ...
    def is_externally_aggregated(self) -> bool: ...
    def is_internally_aggregated(self) -> bool: ...
    def is_standard(self) -> bool: ...
    def is_composite(self) -> bool: ...
    def standard(self) -> BarType: ...
    def composite(self) -> BarType: ...
    @staticmethod
    def from_str(value: str) -> BarType: ...
    @staticmethod
    def new_composite(
        instrument_id: InstrumentId,
        bar_spec: BarSpecification,
        aggregation_source: AggregationSource,
        composite_step: int,
        composite_aggregation: BarAggregation,
        composite_aggregation_source: AggregationSource,
    ) -> BarType: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: BarType) -> bool: ...
    def __lt__(self, other: BarType) -> bool: ...
    def __le__(self, other: BarType) -> bool: ...
    def __gt__(self, other: BarType) -> bool: ...
    def __ge__(self, other: BarType) -> bool: ...
    def __hash__(self) -> int: ...
    def to_str(self) -> str: ...

class Bar(Data):
    def __init__(
        self,
        bar_type: BarType,
        open: Price,
        high: Price,
        low: Price,
        close: Price,
        volume: Quantity,
        ts_event: int,
        ts_init: int,
        is_revision: bool = False,
    ) -> None: ...
    @property
    def bar_type(self) -> BarType: ...
    @property
    def open(self) -> Price: ...
    @property
    def high(self) -> Price: ...
    @property
    def low(self) -> Price: ...
    @property
    def close(self) -> Price: ...
    @property
    def volume(self) -> Quantity: ...
    @property
    def ts_event(self) -> int: ...
    @property
    def ts_init(self) -> int: ...
    def is_single_price(self) -> bool: ...
    @staticmethod
    def from_raw(
        bar_type: BarType,
        open: int,
        high: int,
        low: int,
        close: int,
        price_prec: int,
        volume: int,
        size_prec: int,
        ts_event: int,
        ts_init: int,
    ) -> Bar: ...
    @staticmethod
    def from_raw_arrays_to_list(
        bar_type: BarType,
        price_prec: int,
        size_prec: int,
        opens: NDArray[np.int64],
        highs: NDArray[np.int64],
        lows: NDArray[np.int64],
        closes: NDArray[np.int64],
        volumes: NDArray[np.uint64],
        ts_events: NDArray[np.uint64],
        ts_inits: NDArray[np.uint64],
    ) -> List[Bar]: ...
    @staticmethod
    def from_dict(values: Dict[str, Any]) -> Bar: ...
    @staticmethod
    def to_dict(obj: Bar) -> Dict[str, Any]: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: Bar) -> bool: ...
    def __hash__(self) -> int: ...
    def to_str(self) -> str: ...

class BookOrder:
    def __init__(
        self,
        side: OrderSide,
        price: Price,
        size: Quantity,
        order_id: int,
    ) -> None: ...
    @property
    def price(self) -> Price: ...
    @property
    def size(self) -> Quantity: ...
    @property
    def side(self) -> OrderSide: ...
    @property
    def order_id(self) -> int: ...
    def exposure(self) -> float: ...
    def signed_size(self) -> float: ...
    @staticmethod
    def from_raw(
        side: OrderSide,
        price_raw: int,
        price_prec: int,
        size_raw: int,
        size_prec: int,
        order_id: int,
    ) -> BookOrder: ...
    @staticmethod
    def from_dict(values: Dict[str, Any]) -> BookOrder: ...
    @staticmethod
    def to_dict(obj: BookOrder) -> Dict[str, Any]: ...
    def __eq__(self, other: BookOrder) -> bool: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...

class OrderBookDelta(Data):
    def __init__(
        self,
        instrument_id: InstrumentId,
        action: BookAction,
        order: Optional[BookOrder],
        flags: int,
        sequence: int,
        ts_event: int,
        ts_init: int,
    ) -> None: ...
    @property
    def instrument_id(self) -> InstrumentId: ...
    @property
    def action(self) -> BookAction: ...
    @property
    def is_add(self) -> bool: ...
    @property
    def is_update(self) -> bool: ...
    @property
    def is_delete(self) -> bool: ...
    @property
    def is_clear(self) -> bool: ...
    @property
    def order(self) -> Optional[BookOrder]: ...
    @property
    def flags(self) -> int: ...
    @property
    def sequence(self) -> int: ...
    @property
    def ts_event(self) -> int: ...
    @property
    def ts_init(self) -> int: ...
    @staticmethod
    def from_raw(
        instrument_id: InstrumentId,
        action: BookAction,
        side: OrderSide,
        price_raw: int,
        price_prec: int,
        size_raw: int,
        size_prec: int,
        order_id: int,
        flags: int,
        sequence: int,
        ts_event: int,
        ts_init: int,
    ) -> OrderBookDelta: ...
    @staticmethod
    def from_dict(values: Dict[str, Any]) -> OrderBookDelta: ...
    @staticmethod
    def to_dict(obj: OrderBookDelta) -> Dict[str, Any]: ...
    @staticmethod
    def clear(
        instrument_id: InstrumentId,
        sequence: int,
        ts_event: int,
        ts_init: int,
    ) -> OrderBookDelta: ...
    def __eq__(self, other: OrderBookDelta) -> bool: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...

class OrderBookDeltas(Data):
    def __init__(
        self,
        instrument_id: InstrumentId,
        deltas: List[OrderBookDelta],
    ) -> None: ...
    @property
    def instrument_id(self) -> InstrumentId: ...
    @property
    def deltas(self) -> List[OrderBookDelta]: ...
    @property
    def is_snapshot(self) -> bool: ...
    @property
    def flags(self) -> int: ...
    @property
    def sequence(self) -> int: ...
    @property
    def ts_event(self) -> int: ...
    @property
    def ts_init(self) -> int: ...
    @staticmethod
    def from_dict(values: Dict[str, Any]) -> OrderBookDeltas: ...
    @staticmethod
    def to_dict(obj: OrderBookDeltas) -> Dict[str, Any]: ...
    @staticmethod
    def batch(data: List[OrderBookDelta]) -> List[OrderBookDeltas]: ...
    def __eq__(self, other: OrderBookDeltas) -> bool: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...

class OrderBookDepth10(Data):
    def __init__(
        self,
        instrument_id: InstrumentId,
        bids: List[BookOrder],
        asks: List[BookOrder],
        bid_counts: List[int],
        ask_counts: List[int],
        flags: int,
        sequence: int,
        ts_event: int,
        ts_init: int,
    ) -> None: ...
    @property
    def instrument_id(self) -> InstrumentId: ...
    @property
    def bids(self) -> List[BookOrder]: ...
    @property
    def asks(self) -> List[BookOrder]: ...
    @property
    def bid_counts(self) -> List[int]: ...
    @property
    def ask_counts(self) -> List[int]: ...
    @property
    def flags(self) -> int: ...
    @property
    def sequence(self) -> int: ...
    @property
    def ts_event(self) -> int: ...
    @property
    def ts_init(self) -> int: ...
    @staticmethod
    def from_dict(values: Dict[str, Any]) -> OrderBookDepth10: ...
    @staticmethod
    def to_dict(obj: OrderBookDepth10) -> Dict[str, Any]: ...
    def __eq__(self, other: OrderBookDepth10) -> bool: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...

class InstrumentStatus(Data):
    def __init__(
        self,
        instrument_id: InstrumentId,
        action: MarketStatusAction,
        ts_event: int,
        ts_init: int,
        reason: Optional[str] = None,
        trading_event: Optional[str] = None,
        is_trading: Optional[bool] = None,
        is_quoting: Optional[bool] = None,
        is_short_sell_restricted: Optional[bool] = None,
    ) -> None: ...
    @property
    def instrument_id(self) -> InstrumentId: ...
    @property
    def action(self) -> MarketStatusAction: ...
    @property
    def reason(self) -> Optional[str]: ...
    @property
    def trading_event(self) -> Optional[str]: ...
    @property
    def is_trading(self) -> Optional[bool]: ...
    @property
    def is_quoting(self) -> Optional[bool]: ...
    @property
    def is_short_sell_restricted(self) -> Optional[bool]: ...
    @property
    def ts_event(self) -> int: ...
    @property
    def ts_init(self) -> int: ...
    @staticmethod
    def from_dict(values: Dict[str, Any]) -> InstrumentStatus: ...
    @staticmethod
    def to_dict(obj: InstrumentStatus) -> Dict[str, Any]: ...
    def __eq__(self, other: InstrumentStatus) -> bool: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...

class InstrumentClose(Data):
    def __init__(
        self,
        instrument_id: InstrumentId,
        close_price: Price,
        close_type: InstrumentCloseType,
        ts_event: int,
        ts_init: int,
    ) -> None: ...
    @property
    def instrument_id(self) -> InstrumentId: ...
    @property
    def close_price(self) -> Price: ...
    @property
    def close_type(self) -> InstrumentCloseType: ...
    @property
    def ts_event(self) -> int: ...
    @property
    def ts_init(self) -> int: ...
    @staticmethod
    def from_dict(values: Dict[str, Any]) -> InstrumentClose: ...
    @staticmethod
    def to_dict(obj: InstrumentClose) -> Dict[str, Any]: ...
    def __eq__(self, other: InstrumentClose) -> bool: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...

class QuoteTick(Data):
    def __init__(
        self,
        instrument_id: InstrumentId,
        bid_price: Price,
        ask_price: Price,
        bid_size: Quantity,
        ask_size: Quantity,
        ts_event: int,
        ts_init: int,
    ) -> None: ...
    @property
    def instrument_id(self) -> InstrumentId: ...
    @property
    def bid_price(self) -> Price: ...
    @property
    def ask_price(self) -> Price: ...
    @property
    def bid_size(self) -> Quantity: ...
    @property
    def ask_size(self) -> Quantity: ...
    @property
    def ts_event(self) -> int: ...
    @property
    def ts_init(self) -> int: ...
    def extract_price(self, price_type: PriceType) -> Price: ...
    def extract_size(self, price_type: PriceType) -> Quantity: ...
    @staticmethod
    def from_raw(
        instrument_id: InstrumentId,
        bid_price_raw: int,
        ask_price_raw: int,
        bid_price_prec: int,
        ask_price_prec: int,
        bid_size_raw: int,
        ask_size_raw: int,
        bid_size_prec: int,
        ask_size_prec: int,
        ts_event: int,
        ts_init: int,
    ) -> QuoteTick: ...
    @staticmethod
    def from_raw_arrays_to_list(
        instrument_id: InstrumentId,
        price_prec: int,
        size_prec: int,
        bid_prices_raw: NDArray[np.int64],
        ask_prices_raw: NDArray[np.int64],
        bid_sizes_raw: NDArray[np.uint64],
        ask_sizes_raw: NDArray[np.uint64],
        ts_events: NDArray[np.uint64],
        ts_inits: NDArray[np.uint64],
    ) -> List[QuoteTick]: ...
    @staticmethod
    def from_dict(values: Dict[str, Any]) -> QuoteTick: ...
    @staticmethod
    def to_dict(obj: QuoteTick) -> Dict[str, Any]: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: QuoteTick) -> bool: ...
    def __hash__(self) -> int: ...
    def to_str(self) -> str: ...

class TradeTick(Data):
    def __init__(
        self,
        instrument_id: InstrumentId,
        price: Price,
        size: Quantity,
        aggressor_side: AggressorSide,
        trade_id: TradeId,
        ts_event: int,
        ts_init: int,
    ) -> None: ...
    @property
    def instrument_id(self) -> InstrumentId: ...
    @property
    def trade_id(self) -> TradeId: ...
    @property
    def price(self) -> Price: ...
    @property
    def size(self) -> Quantity: ...
    @property
    def aggressor_side(self) -> AggressorSide: ...
    @property
    def ts_event(self) -> int: ...
    @property
    def ts_init(self) -> int: ...
    @staticmethod
    def from_raw(
        instrument_id: InstrumentId,
        price_raw: int,
        price_prec: int,
        size_raw: int,
        size_prec: int,
        aggressor_side: AggressorSide,
        trade_id: TradeId,
        ts_event: int,
        ts_init: int,
    ) -> TradeTick: ...
    @staticmethod
    def from_raw_arrays_to_list(
        instrument_id: InstrumentId,
        price_prec: int,
        size_prec: int,
        prices_raw: NDArray[np.int64],
        sizes_raw: NDArray[np.uint64],
        aggressor_sides: NDArray[np.uint8],
        trade_ids: List[str],
        ts_events: NDArray[np.uint64],
        ts_inits: NDArray[np.uint64],
    ) -> List[TradeTick]: ...
    @staticmethod
    def from_dict(values: Dict[str, Any]) -> TradeTick: ...
    @staticmethod
    def to_dict(obj: TradeTick) -> Dict[str, Any]: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: TradeTick) -> bool: ...
    def __hash__(self) -> int: ...
    def to_str(self) -> str: ...

class DataType:
    def __init__(
        self, type: Type[Data], metadata: Optional[Dict[str, Any]] = None
    ) -> None: ...
    @property
    def type(self) -> Type[Data]: ...
    @property
    def metadata(self) -> Dict[str, Any]: ...
    @property
    def topic(self) -> str: ...
    def __eq__(self, other: DataType) -> bool: ...
    def __lt__(self, other: DataType) -> bool: ...
    def __le__(self, other: DataType) -> bool: ...
    def __gt__(self, other: DataType) -> bool: ...
    def __ge__(self, other: DataType) -> bool: ...
    def __hash__(self) -> int: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...

class CustomData(Data):
    def __init__(self, data_type: DataType, data: Data) -> None: ...
    @property
    def data_type(self) -> DataType: ...
    @property
    def data(self) -> Data: ...
    @property
    def ts_event(self) -> int: ...
    @property
    def ts_init(self) -> int: ...
    def __repr__(self) -> str: ...

def capsule_to_list(capsule: Any) -> List[Data]: ...
def capsule_to_data(capsule: Any) -> Data: ...
