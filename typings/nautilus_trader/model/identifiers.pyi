from typing import Any, Optional

class Identifier:
    """The abstract base class for all identifiers."""
    def __init__(self) -> None: ...
    def __lt__(self, other: Identifier) -> bool: ...
    def __le__(self, other: Identifier) -> bool: ...
    def __gt__(self, other: Identifier) -> bool: ...
    def __ge__(self, other: Identifier) -> bool: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def __getstate__(self) -> Any: ...
    def __setstate__(self, state: Any) -> None: ...
    @property
    def value(self) -> str: ...

class Venue(Identifier):
    """
    Represents a valid trading venue ID.

    Parameters
    ----------
    name : str
        The venue ID value.

    Raises
    ------
    ValueError
        If `name` is not a valid string.
    """
    def __init__(self, name: str) -> None: ...
    def __eq__(self, other: Optional[Venue]) -> bool: ...
    def __hash__(self) -> int: ...
    def is_synthetic(self) -> bool: ...
    @staticmethod
    def from_code(code: str) -> Optional[Venue]: ...

    # Common venue constants
    BINANCE: Venue
    BINANCE_FUTURES: Venue
    BINANCE_FUTURES_TESTNET: Venue
    BINANCE_PERPETUAL: Venue
    BINANCE_PERPETUAL_TESTNET: Venue
    BINANCE_US: Venue
    BITMEX: Venue
    BITMEX_TESTNET: Venue
    BYBIT: Venue
    BYBIT_TESTNET: Venue
    COINBASE: Venue
    DERIBIT: Venue
    DERIBIT_TESTNET: Venue
    FTX: Venue
    FTX_US: Venue
    GATEIO: Venue
    INTERACTIVE_BROKERS: Venue
    KRAKEN: Venue
    KRAKEN_FUTURES: Venue
    OKX: Venue
    PAPER: Venue
    SIM: Venue
    SYNTH: Venue

class Symbol(Identifier):
    """
    Represents a valid ticker symbol ID for a tradable instrument.

    Parameters
    ----------
    value : str
        The ticker symbol ID value.
    """
    def __init__(self, value: str) -> None: ...
    def __eq__(self, other: Optional[Symbol]) -> bool: ...
    def __hash__(self) -> int: ...
    def is_composite(self) -> bool: ...
    def root(self) -> str: ...
    def topic(self) -> str: ...

class InstrumentId(Identifier):
    """
    Represents a valid instrument ID.

    Parameters
    ----------
    symbol : Symbol
        The instruments ticker symbol.
    venue : Venue
        The instruments trading venue.
    """
    def __init__(self, symbol: Symbol, venue: Venue) -> None: ...
    def __eq__(self, other: Optional[InstrumentId]) -> bool: ...
    def __hash__(self) -> int: ...
    @property
    def symbol(self) -> Symbol: ...
    @property
    def venue(self) -> Venue: ...
    @staticmethod
    def from_str(value: str) -> InstrumentId: ...
    def is_synthetic(self) -> bool: ...

# Other identifier classes follow similar pattern...
class ClientId(Identifier):
    def __init__(self, value: str) -> None: ...
    def __eq__(self, other: Optional[ClientId]) -> bool: ...
    def __hash__(self) -> int: ...

class TraderId(Identifier):
    def __init__(self, value: str) -> None: ...
    def __eq__(self, other: Optional[TraderId]) -> bool: ...
    def __hash__(self) -> int: ...
    def get_tag(self) -> str: ...

class StrategyId(Identifier):
    def __init__(self, value: str) -> None: ...
    def __eq__(self, other: Optional[StrategyId]) -> bool: ...
    def __hash__(self) -> int: ...
    def get_tag(self) -> str: ...
    def is_external(self) -> bool: ...
    @staticmethod
    def external() -> StrategyId: ...

class ComponentId(Identifier):
    def __init__(self, value: str) -> None: ...
    def __eq__(self, other: Optional[ComponentId]) -> bool: ...
    def __hash__(self) -> int: ...

class AccountId(Identifier):
    def __init__(self, value: str) -> None: ...
    def __eq__(self, other: Optional[AccountId]) -> bool: ...
    def __hash__(self) -> int: ...
    def get_issuer(self) -> str: ...
    def get_id(self) -> str: ...

class ClientOrderId(Identifier):
    def __init__(self, value: str) -> None: ...
    def __eq__(self, other: Optional[ClientOrderId]) -> bool: ...
    def __hash__(self) -> int: ...

class VenueOrderId(Identifier):
    def __init__(self, value: str) -> None: ...
    def __eq__(self, other: Optional[VenueOrderId]) -> bool: ...
    def __hash__(self) -> int: ...

class OrderListId(Identifier):
    def __init__(self, value: str) -> None: ...
    def __eq__(self, other: Optional[OrderListId]) -> bool: ...
    def __hash__(self) -> int: ...

class PositionId(Identifier):
    def __init__(self, value: str) -> None: ...
    def __eq__(self, other: Optional[PositionId]) -> bool: ...
    def __hash__(self) -> int: ...

class TradeId(Identifier):
    def __init__(self, value: str) -> None: ...
    def __eq__(self, other: Optional[TradeId]) -> bool: ...
    def __hash__(self) -> int: ...

class ExecAlgorithmId(Identifier):
    """
    Represents a valid execution algorithm ID.

    Parameters
    ----------
    value : str
        The execution algorithm ID value.

    Raises
    ------
    ValueError
        If `value` is not a valid string.
    """
    def __init__(self, value: str) -> None: ...
    def __eq__(self, other: ExecAlgorithmId) -> bool: ...
    def __hash__(self) -> int: ...
    @property
    def value(self) -> str: ...
